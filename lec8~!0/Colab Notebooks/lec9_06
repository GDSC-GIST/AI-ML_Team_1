{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"lec9_06","provenance":[{"file_id":"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c06_nlp_subwords.ipynb","timestamp":1636435191942}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"punL79CN7Ox6"},"source":["##### Copyright 2020 The TensorFlow Authors."]},{"cell_type":"code","metadata":{"cellView":"form","id":"_ckMIh7O7s6D"},"source":["#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CH5gnvxl-N3U"},"source":["# What's in a (sub)word?"]},{"cell_type":"markdown","metadata":{"id":"S5Uhzt6vVIB2"},"source":["<table class=\"tfo-notebook-buttons\" align=\"left\">\n","  <td>\n","    <a target=\"_blank\" href=\"https://colab.research.google.com/github/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c06_nlp_subwords.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\n","  </td>\n","  <td>\n","    <a target=\"_blank\" href=\"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c06_nlp_subwords.ipynb\"><img src=\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\" />View source on GitHub</a>\n","  </td>\n","</table>"]},{"cell_type":"markdown","metadata":{"id":"ykxAKKa1Dl0s"},"source":["In this colab, we'll work with subwords, or words made up of the pieces of larger words, and see how that impacts our network and related embeddings."]},{"cell_type":"markdown","metadata":{"id":"QQCr_NAT-g5w"},"source":["## Import TensorFlow and related functions"]},{"cell_type":"code","metadata":{"id":"Q8Wa_ZlX-mPH","executionInfo":{"status":"ok","timestamp":1636436746718,"user_tz":-540,"elapsed":3494,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.preprocessing.sequence import pad_sequences"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MRHk-4Te-yLJ"},"source":["## Get the original dataset\n","\n","We'll once again use the dataset containing Amazon and Yelp reviews. This dataset was originally extracted from [here](https://www.kaggle.com/marklvl/sentiment-labelled-sentences-data-set)."]},{"cell_type":"code","metadata":{"id":"XJAxrOLi-02C","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636436747191,"user_tz":-540,"elapsed":495,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"f999c962-6dac-41b0-ae15-f5b416bf9a50"},"source":["!wget --no-check-certificate \\\n","    https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P \\\n","    -O /tmp/sentiment.csv"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-11-09 05:45:45--  https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving drive.google.com (drive.google.com)... 173.194.197.100, 173.194.197.139, 173.194.197.102, ...\n","Connecting to drive.google.com (drive.google.com)|173.194.197.100|:443... connected.\n","HTTP request sent, awaiting response... 302 Moved Temporarily\n","Location: https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/529dj3sqegkstek3pg71v9la1k98piq9/1636436700000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P [following]\n","Warning: wildcards not supported in HTTP.\n","--2021-11-09 05:45:45--  https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/529dj3sqegkstek3pg71v9la1k98piq9/1636436700000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)... 173.194.198.132, 2607:f8b0:4001:c1c::84\n","Connecting to doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)|173.194.198.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 127831 (125K) [text/csv]\n","Saving to: ‘/tmp/sentiment.csv’\n","\n","/tmp/sentiment.csv  100%[===================>] 124.83K  --.-KB/s    in 0.003s  \n","\n","2021-11-09 05:45:45 (42.9 MB/s) - ‘/tmp/sentiment.csv’ saved [127831/127831]\n","\n"]}]},{"cell_type":"code","metadata":{"id":"Dr-EDUKP_HBl","executionInfo":{"status":"ok","timestamp":1636436747194,"user_tz":-540,"elapsed":18,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["import pandas as pd\n","\n","dataset = pd.read_csv('/tmp/sentiment.csv')\n","\n","# Just extract out sentences and labels first - we will create subwords here\n","sentences = dataset['text'].tolist()\n","labels = dataset['sentiment'].tolist()"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8zut9Wng_R3B"},"source":["## Create a subwords dataset\n","\n","We can use the existing Amazon and Yelp reviews dataset with `tensorflow_datasets`'s `SubwordTextEncoder` functionality. `SubwordTextEncoder.build_from_corpus()` will create a tokenizer for us. You could also use this functionality to get subwords from a much larger corpus of text as well, but we'll just use our existing dataset here.\n","\n","The Amazon and Yelp dataset we are using isn't super large, so we'll create a subword `vocab_size` of only the 1,000 most common words, as well as cutting off each subword to be at most 5 characters.\n","\n","Check out the related documentation [here](https://www.tensorflow.org/datasets/api_docs/python/tfds/features/text/SubwordTextEncoder#build_from_corpus)."]},{"cell_type":"code","metadata":{"id":"aElsgxia_43g","executionInfo":{"status":"ok","timestamp":1636436752009,"user_tz":-540,"elapsed":4830,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["import tensorflow_datasets as tfds\n","\n","vocab_size = 1000\n","tokenizer = tfds.deprecated.text.SubwordTextEncoder.build_from_corpus(sentences, vocab_size, max_subword_length=5)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"0XNZWGKqBDc3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636436752012,"user_tz":-540,"elapsed":30,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"926d425e-c860-4f1b-adba-4a14d94b2fc0"},"source":["# Check that the tokenizer works appropriately\n","num = 5\n","print(sentences[num])\n","encoded = tokenizer.encode(sentences[num])\n","print(encoded)\n","# Separately print out each subword, decoded\n","for i in encoded:\n","  print(tokenizer.decode([i]))"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["I have to jiggle the plug to get it to line up right to get decent volume.\n","[4, 31, 6, 849, 162, 450, 12, 1, 600, 438, 775, 6, 175, 14, 6, 55, 213, 159, 474, 775, 6, 175, 614, 380, 295, 148, 72, 789]\n","I \n","have \n","to \n","j\n","ig\n","gl\n","e \n","the \n","pl\n","ug\n"," \n","to \n","get \n","it \n","to \n","li\n","ne \n","up \n","right\n"," \n","to \n","get \n","dec\n","ent \n","vo\n","lu\n","me\n",".\n"]}]},{"cell_type":"markdown","metadata":{"id":"gYnbqctXGKcC"},"source":["## Replace sentence data with encoded subwords\n","\n","Now, we'll re-create the dataset to be used for training by actually encoding each of the individual sentences. This is equivalent to `text_to_sequences` with the `Tokenizer` we used in earlier exercises."]},{"cell_type":"code","metadata":{"id":"rAmql34aGfeV","executionInfo":{"status":"ok","timestamp":1636436752482,"user_tz":-540,"elapsed":488,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["for i, sentence in enumerate(sentences):\n","  sentences[i] = tokenizer.encode(sentence)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"jNnee_csG5Iz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636436752485,"user_tz":-540,"elapsed":21,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"e87218d5-52da-41c8-e17b-60db57c9e969"},"source":["# Check the sentences are appropriately replaced\n","print(sentences[1])"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[625, 677, 626, 274, 380, 633, 148, 844, 789]\n"]}]},{"cell_type":"markdown","metadata":{"id":"zpIigjecHVkF"},"source":["## Final pre-processing\n","\n","Before training, we still need to pad the sequences, as well as split into training and test sets."]},{"cell_type":"code","metadata":{"id":"INIFSAcEHool","executionInfo":{"status":"ok","timestamp":1636436753635,"user_tz":-540,"elapsed":14,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["import numpy as np\n","\n","max_length = 50\n","trunc_type='post'\n","padding_type='post'\n","\n","# Pad all sentences\n","sentences_padded = pad_sequences(sentences, maxlen=max_length, \n","                                 padding=padding_type, truncating=trunc_type)\n","\n","# Separate out the sentences and labels into training and test sets\n","training_size = int(len(sentences) * 0.8)\n","\n","training_sentences = sentences_padded[0:training_size]\n","testing_sentences = sentences_padded[training_size:]\n","training_labels = labels[0:training_size]\n","testing_labels = labels[training_size:]\n","\n","# Make labels into numpy arrays for use with the network later\n","training_labels_final = np.array(training_labels)\n","testing_labels_final = np.array(testing_labels)"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QC9A-sTpPPiL"},"source":["## Train a Sentiment Model"]},{"cell_type":"code","metadata":{"id":"eDKcL64IPcfy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636436759240,"user_tz":-540,"elapsed":5615,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"64e2c10a-fc5b-495a-fef7-8f6cac282a4b"},"source":["embedding_dim = 16\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.GlobalAveragePooling1D(),\n","    tf.keras.layers.Dense(6, activation='relu'),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","model.summary()"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 50, 16)            16000     \n","_________________________________________________________________\n","global_average_pooling1d (Gl (None, 16)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 6)                 102       \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 7         \n","=================================================================\n","Total params: 16,109\n","Trainable params: 16,109\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"VqkMNtIeP3oz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636436781123,"user_tz":-540,"elapsed":21896,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"fb43d009-b290-4819-867c-5fe682fff6f2"},"source":["num_epochs = 30\n","model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","history = model.fit(training_sentences, training_labels_final, epochs=num_epochs, \n","                    validation_data=(testing_sentences, testing_labels_final))"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","50/50 [==============================] - 4s 10ms/step - loss: 0.6930 - accuracy: 0.5223 - val_loss: 0.6939 - val_accuracy: 0.4135\n","Epoch 2/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6918 - accuracy: 0.5455 - val_loss: 0.6939 - val_accuracy: 0.4386\n","Epoch 3/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6851 - accuracy: 0.5989 - val_loss: 0.6891 - val_accuracy: 0.5138\n","Epoch 4/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6725 - accuracy: 0.6441 - val_loss: 0.6797 - val_accuracy: 0.5539\n","Epoch 5/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6511 - accuracy: 0.6773 - val_loss: 0.6536 - val_accuracy: 0.7268\n","Epoch 6/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6225 - accuracy: 0.7621 - val_loss: 0.6382 - val_accuracy: 0.6892\n","Epoch 7/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.5844 - accuracy: 0.8004 - val_loss: 0.6115 - val_accuracy: 0.7143\n","Epoch 8/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.5438 - accuracy: 0.8117 - val_loss: 0.5753 - val_accuracy: 0.7744\n","Epoch 9/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.5002 - accuracy: 0.8336 - val_loss: 0.5589 - val_accuracy: 0.7694\n","Epoch 10/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4601 - accuracy: 0.8462 - val_loss: 0.5416 - val_accuracy: 0.7569\n","Epoch 11/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4226 - accuracy: 0.8594 - val_loss: 0.5352 - val_accuracy: 0.7343\n","Epoch 12/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3916 - accuracy: 0.8738 - val_loss: 0.5201 - val_accuracy: 0.7494\n","Epoch 13/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3639 - accuracy: 0.8763 - val_loss: 0.5076 - val_accuracy: 0.7544\n","Epoch 14/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3388 - accuracy: 0.8832 - val_loss: 0.5040 - val_accuracy: 0.7544\n","Epoch 15/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3174 - accuracy: 0.8870 - val_loss: 0.4950 - val_accuracy: 0.7594\n","Epoch 16/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3001 - accuracy: 0.8945 - val_loss: 0.5007 - val_accuracy: 0.7494\n","Epoch 17/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2829 - accuracy: 0.9014 - val_loss: 0.5008 - val_accuracy: 0.7519\n","Epoch 18/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2694 - accuracy: 0.9065 - val_loss: 0.5064 - val_accuracy: 0.7494\n","Epoch 19/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2560 - accuracy: 0.9102 - val_loss: 0.5386 - val_accuracy: 0.7494\n","Epoch 20/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.2440 - accuracy: 0.9146 - val_loss: 0.5263 - val_accuracy: 0.7419\n","Epoch 21/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2323 - accuracy: 0.9196 - val_loss: 0.5462 - val_accuracy: 0.7469\n","Epoch 22/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2227 - accuracy: 0.9228 - val_loss: 0.5479 - val_accuracy: 0.7419\n","Epoch 23/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2138 - accuracy: 0.9303 - val_loss: 0.5298 - val_accuracy: 0.7619\n","Epoch 24/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2075 - accuracy: 0.9341 - val_loss: 0.5661 - val_accuracy: 0.7368\n","Epoch 25/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.1965 - accuracy: 0.9353 - val_loss: 0.5688 - val_accuracy: 0.7444\n","Epoch 26/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.1897 - accuracy: 0.9404 - val_loss: 0.5564 - val_accuracy: 0.7569\n","Epoch 27/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.1842 - accuracy: 0.9397 - val_loss: 0.5962 - val_accuracy: 0.7419\n","Epoch 28/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.1761 - accuracy: 0.9492 - val_loss: 0.5912 - val_accuracy: 0.7494\n","Epoch 29/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.1683 - accuracy: 0.9529 - val_loss: 0.5889 - val_accuracy: 0.7494\n","Epoch 30/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.1628 - accuracy: 0.9579 - val_loss: 0.6203 - val_accuracy: 0.7469\n"]}]},{"cell_type":"markdown","metadata":{"id":"sj18M42kQkCi"},"source":["## Visualize the Training Graph\n","\n","We can visualize the training graph below again. Does there appear to be a difference in how validation accuracy and loss is trending compared to with full words?"]},{"cell_type":"code","metadata":{"id":"uy8KIMPIQlvH","colab":{"base_uri":"https://localhost:8080/","height":541},"executionInfo":{"status":"ok","timestamp":1636436781823,"user_tz":-540,"elapsed":741,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"c2b4c527-64ae-4505-95a3-1f760a555e3e"},"source":["import matplotlib.pyplot as plt\n","\n","\n","def plot_graphs(history, string):\n","  plt.plot(history.history[string])\n","  plt.plot(history.history['val_'+string])\n","  plt.xlabel(\"Epochs\")\n","  plt.ylabel(string)\n","  plt.legend([string, 'val_'+string])\n","  plt.show()\n","  \n","plot_graphs(history, \"accuracy\")\n","plot_graphs(history, \"loss\")"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"_m7QzouQQ1Rs"},"source":["## Get files for visualizing the network\n","\n","Once again, you can visualize the sentiment related to all of the subwords using the below code and by heading to http://projector.tensorflow.org/ to upload and view the data.\n","\n","Note that the below code does have a few small changes to handle the different way text is encoded in our dataset compared to before with the built in `Tokenizer`.\n","\n","You may get an error like \"Number of tensors (999) do not match the number of lines in metadata (992).\" As long as you load the vectors first without error and wait a few seconds after this pops up, you will be able to click outside the file load menu and still view the visualization."]},{"cell_type":"code","metadata":{"id":"dezs4wE5RMQu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636436781832,"user_tz":-540,"elapsed":44,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"207e38c3-b820-4a3e-f6cd-c269e5bb4990"},"source":["# First get the weights of the embedding layer\n","e = model.layers[0]\n","weights = e.get_weights()[0]\n","print(weights.shape) # shape: (vocab_size, embedding_dim)"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["(1000, 16)\n"]}]},{"cell_type":"code","metadata":{"id":"LXKqy9Z1RSmt","executionInfo":{"status":"ok","timestamp":1636436781836,"user_tz":-540,"elapsed":41,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["import io\n","\n","# Write out the embedding vectors and metadata\n","out_v = io.open('vecs.tsv', 'w', encoding='utf-8')\n","out_m = io.open('meta.tsv', 'w', encoding='utf-8')\n","for word_num in range(0, vocab_size - 1):\n","  word = tokenizer.decode([word_num])\n","  embeddings = weights[word_num]\n","  out_m.write(word + \"\\n\")\n","  out_v.write('\\t'.join([str(x) for x in embeddings]) + \"\\n\")\n","out_v.close()\n","out_m.close()"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"v04wBMybRoGx","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1636436781840,"user_tz":-540,"elapsed":42,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"d5579ca5-3174-463b-90be-980ad895ad08"},"source":["# Download the files\n","try:\n","  from google.colab import files\n","except ImportError:\n","  pass\n","else:\n","  files.download('vecs.tsv')\n","  files.download('meta.tsv')"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_7af68624-780f-4672-8dde-aa8b34536d14\", \"vecs.tsv\", 187309)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_93e919a5-12a0-468a-bd1f-323eaa396f4e\", \"meta.tsv\", 3901)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]}]}