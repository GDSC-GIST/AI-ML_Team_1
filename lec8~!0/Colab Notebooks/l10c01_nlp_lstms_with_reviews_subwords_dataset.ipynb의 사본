{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"lec10_01","provenance":[{"file_id":"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l10c01_nlp_lstms_with_reviews_subwords_dataset.ipynb","timestamp":1636437227249}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"punL79CN7Ox6"},"source":["##### Copyright 2020 The TensorFlow Authors."]},{"cell_type":"code","metadata":{"cellView":"form","id":"_ckMIh7O7s6D"},"source":["#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hAclqSm3OOml"},"source":["# Using LSTMs with the subwords dataset\n"]},{"cell_type":"markdown","metadata":{"id":"S5Uhzt6vVIB2"},"source":["<table class=\"tfo-notebook-buttons\" align=\"left\">\n","  <td>\n","    <a target=\"_blank\" href=\"https://colab.research.google.com/github/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l10c01_nlp_lstms_with_reviews_subwords_dataset.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\n","  </td>\n","  <td>\n","    <a target=\"_blank\" href=\"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l10c01_nlp_lstms_with_reviews_subwords_dataset.ipynb\"><img src=\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\" />View source on GitHub</a>\n","  </td>\n","</table>"]},{"cell_type":"markdown","metadata":{"id":"KTVx8__oGR9J"},"source":["In this colab, you'll compare the results of using a model with an Embedding layer and then adding bidirectional LSTM layers.\n","\n","You'll work with the dataset of subwords for the combined Yelp and Amazon reviews.\n","\n","You'll use your models to predict the sentiment of new reviews."]},{"cell_type":"code","metadata":{"id":"L62G7LTwNzoD","executionInfo":{"status":"ok","timestamp":1636437287855,"user_tz":-540,"elapsed":3069,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.preprocessing.sequence import pad_sequences"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hLcl0QHvDjTV"},"source":["# Get the dataset\n","\n","Start by getting the dataset containing Amazon and Yelp reviews, with their related sentiment (1 for positive, 0 for negative). This dataset was originally extracted from [here](https://www.kaggle.com/marklvl/sentiment-labelled-sentences-data-set).\n"]},{"cell_type":"code","metadata":{"id":"nCOtiRJZbxCH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437288628,"user_tz":-540,"elapsed":410,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"3f3bf43d-33b1-4fdc-e900-7e20faf895e8"},"source":["!wget --no-check-certificate \\\n","    https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P -O /tmp/sentiment.csv"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-11-09 05:54:46--  https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving drive.google.com (drive.google.com)... 172.217.212.113, 172.217.212.100, 172.217.212.138, ...\n","Connecting to drive.google.com (drive.google.com)|172.217.212.113|:443... connected.\n","HTTP request sent, awaiting response... 302 Moved Temporarily\n","Location: https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/ik9kra1je2inbf43k4idj7nb6qp74nth/1636437225000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P [following]\n","Warning: wildcards not supported in HTTP.\n","--2021-11-09 05:54:47--  https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/ik9kra1je2inbf43k4idj7nb6qp74nth/1636437225000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)... 74.125.132.132, 2607:f8b0:4001:c00::84\n","Connecting to doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)|74.125.132.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 127831 (125K) [text/csv]\n","Saving to: ‘/tmp/sentiment.csv’\n","\n","/tmp/sentiment.csv  100%[===================>] 124.83K  --.-KB/s    in 0.002s  \n","\n","2021-11-09 05:54:47 (62.4 MB/s) - ‘/tmp/sentiment.csv’ saved [127831/127831]\n","\n"]}]},{"cell_type":"code","metadata":{"id":"XuqER_KMD-xS","executionInfo":{"status":"ok","timestamp":1636437289061,"user_tz":-540,"elapsed":443,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["import pandas as pd\n","\n","dataset = pd.read_csv('/tmp/sentiment.csv')\n","\n","# Extract out sentences and labels\n","sentences = dataset['text'].tolist()\n","labels = dataset['sentiment'].tolist()"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"Tbsx1T2CXPNO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437289062,"user_tz":-540,"elapsed":14,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"da270dcc-a4ed-431c-9761-f3eb7d533ad7"},"source":["# Print some example sentences and labels\n","for x in range(2):\n","  print(sentences[x])\n","  print(labels[x])\n","  print(\"\\n\")"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["So there is no way for me to plug it in here in the US unless I go by a converter.\n","0\n","\n","\n","Good case Excellent value.\n","1\n","\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"33AthPiALFZK"},"source":["#Create a subwords dataset\n","\n","We will use the Amazon and Yelp reviews dataset with tensorflow_datasets's SubwordTextEncoder functionality. \n","\n","SubwordTextEncoder.build_from_corpus() will create a tokenizer for us. You could also use this functionality to get subwords from a much larger corpus of text as well, but we'll just use our existing dataset here.\n","\n","We'll create a subword vocab_size of only the 1,000 most common subwords, as well as cutting off each subword to be at most 5 characters.\n","\n","Check out the related documentation for the the subword text encoder [here](https://www.tensorflow.org/datasets/api_docs/python/tfds/features/text/SubwordTextEncoder#build_from_corpus)."]},{"cell_type":"code","metadata":{"id":"6NaicNCcLYyf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437293608,"user_tz":-540,"elapsed":4553,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"0cfd448f-2e52-4369-dbcd-87fe12741895"},"source":["import tensorflow_datasets as tfds\n","\n","vocab_size = 1000\n","tokenizer = tfds.deprecated.text.SubwordTextEncoder.build_from_corpus(sentences, vocab_size, max_subword_length=5)\n","\n","# How big is the vocab size?\n","print(\"Vocab size is \", tokenizer.vocab_size)"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Vocab size is  999\n"]}]},{"cell_type":"code","metadata":{"id":"xvRVoeIVLevh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437293609,"user_tz":-540,"elapsed":33,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"9b26c5c9-4692-4d99-a0e7-c90140a3bdd4"},"source":["# Check that the tokenizer works appropriately\n","num = 5\n","print(sentences[num])\n","encoded = tokenizer.encode(sentences[num])\n","print(encoded)"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["I have to jiggle the plug to get it to line up right to get decent volume.\n","[4, 31, 6, 849, 162, 450, 12, 1, 600, 438, 775, 6, 175, 14, 6, 55, 213, 159, 474, 775, 6, 175, 614, 380, 295, 148, 72, 789]\n"]}]},{"cell_type":"code","metadata":{"id":"G_vacTCifklV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437293610,"user_tz":-540,"elapsed":26,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"535790fa-5fef-4c57-ff4c-ac53cce48418"},"source":["# Separately print out each subword, decoded\n","for i in encoded:\n","  print(tokenizer.decode([i]))"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["I \n","have \n","to \n","j\n","ig\n","gl\n","e \n","the \n","pl\n","ug\n"," \n","to \n","get \n","it \n","to \n","li\n","ne \n","up \n","right\n"," \n","to \n","get \n","dec\n","ent \n","vo\n","lu\n","me\n",".\n"]}]},{"cell_type":"markdown","metadata":{"id":"cT528cptLupl"},"source":["## Replace sentence data with encoded subwords\n","\n","Now, we'll create the sequences to be used for training by actually encoding each of the individual sentences. This is equivalent to `text_to_sequences` with the `Tokenizer` we used in earlier exercises."]},{"cell_type":"code","metadata":{"id":"lkseMhxjL09F","executionInfo":{"status":"ok","timestamp":1636437293613,"user_tz":-540,"elapsed":21,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["for i, sentence in enumerate(sentences):\n","  sentences[i] = tokenizer.encode(sentence)"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"y21yRuzmL43U","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437293615,"user_tz":-540,"elapsed":21,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"642b93be-32d7-4541-b102-ff5e342f7b15"},"source":["# Check the sentences are appropriately replaced\n","print(sentences[5])"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[4, 31, 6, 849, 162, 450, 12, 1, 600, 438, 775, 6, 175, 14, 6, 55, 213, 159, 474, 775, 6, 175, 614, 380, 295, 148, 72, 789]\n"]}]},{"cell_type":"markdown","metadata":{"id":"8HrcPHESMBMs"},"source":["## Final pre-processing\n","\n","Before training, we still need to pad the sequences, as well as split into training and test sets."]},{"cell_type":"code","metadata":{"id":"50-hTsogLSL-","executionInfo":{"status":"ok","timestamp":1636437294085,"user_tz":-540,"elapsed":485,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["import numpy as np\n","\n","max_length = 50\n","trunc_type='post'\n","padding_type='post'\n","\n","# Pad all sequences\n","sequences_padded = pad_sequences(sentences, maxlen=max_length, \n","                                 padding=padding_type, truncating=trunc_type)\n","\n","# Separate out the sentences and labels into training and test sets\n","training_size = int(len(sentences) * 0.8)\n","\n","training_sequences = sequences_padded[0:training_size]\n","testing_sequences = sequences_padded[training_size:]\n","training_labels = labels[0:training_size]\n","testing_labels = labels[training_size:]\n","\n","# Make labels into numpy arrays for use with the network later\n","training_labels_final = np.array(training_labels)\n","testing_labels_final = np.array(testing_labels)"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PahZm7YEQ8EI"},"source":["# Create the model using an Embedding"]},{"cell_type":"code","metadata":{"id":"c_nyQeI0RCCv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437299442,"user_tz":-540,"elapsed":5369,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"2c5aa2ed-575c-462f-9443-335d3ad163c5"},"source":["embedding_dim = 16\n","\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.GlobalAveragePooling1D(), \n","    tf.keras.layers.Dense(6, activation='relu'),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","model.summary()"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 50, 16)            16000     \n","_________________________________________________________________\n","global_average_pooling1d (Gl (None, 16)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 6)                 102       \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 7         \n","=================================================================\n","Total params: 16,109\n","Trainable params: 16,109\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"3WRXrx8BRO2L"},"source":["# Train the model"]},{"cell_type":"code","metadata":{"id":"oBKyVYvxRQ_9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437321056,"user_tz":-540,"elapsed":21627,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"619d6b05-6483-4008-9c38-e8d491737d1c"},"source":["num_epochs = 30\n","model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","history = model.fit(training_sequences, training_labels_final, epochs=num_epochs, validation_data=(testing_sequences, testing_labels_final))\n"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","50/50 [==============================] - 4s 11ms/step - loss: 0.6917 - accuracy: 0.5223 - val_loss: 0.6984 - val_accuracy: 0.4110\n","Epoch 2/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6885 - accuracy: 0.5223 - val_loss: 0.6990 - val_accuracy: 0.4110\n","Epoch 3/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6848 - accuracy: 0.5223 - val_loss: 0.6992 - val_accuracy: 0.4110\n","Epoch 4/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6797 - accuracy: 0.5223 - val_loss: 0.6986 - val_accuracy: 0.4110\n","Epoch 5/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.6721 - accuracy: 0.5593 - val_loss: 0.6944 - val_accuracy: 0.4486\n","Epoch 6/30\n","50/50 [==============================] - 1s 10ms/step - loss: 0.6610 - accuracy: 0.5800 - val_loss: 0.6852 - val_accuracy: 0.4987\n","Epoch 7/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6466 - accuracy: 0.6303 - val_loss: 0.6830 - val_accuracy: 0.4787\n","Epoch 8/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.6276 - accuracy: 0.6547 - val_loss: 0.6656 - val_accuracy: 0.5414\n","Epoch 9/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6047 - accuracy: 0.7012 - val_loss: 0.6445 - val_accuracy: 0.6441\n","Epoch 10/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.5745 - accuracy: 0.7621 - val_loss: 0.6413 - val_accuracy: 0.5990\n","Epoch 11/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.5405 - accuracy: 0.7910 - val_loss: 0.6190 - val_accuracy: 0.6366\n","Epoch 12/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.5049 - accuracy: 0.8198 - val_loss: 0.5811 - val_accuracy: 0.7343\n","Epoch 13/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4704 - accuracy: 0.8418 - val_loss: 0.5736 - val_accuracy: 0.7168\n","Epoch 14/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4352 - accuracy: 0.8575 - val_loss: 0.5485 - val_accuracy: 0.7444\n","Epoch 15/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4033 - accuracy: 0.8701 - val_loss: 0.5315 - val_accuracy: 0.7469\n","Epoch 16/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3719 - accuracy: 0.8788 - val_loss: 0.5299 - val_accuracy: 0.7368\n","Epoch 17/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3435 - accuracy: 0.8870 - val_loss: 0.5139 - val_accuracy: 0.7444\n","Epoch 18/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3210 - accuracy: 0.8914 - val_loss: 0.5010 - val_accuracy: 0.7519\n","Epoch 19/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3002 - accuracy: 0.8977 - val_loss: 0.4926 - val_accuracy: 0.7594\n","Epoch 20/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2850 - accuracy: 0.9021 - val_loss: 0.5213 - val_accuracy: 0.7619\n","Epoch 21/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2657 - accuracy: 0.9140 - val_loss: 0.5117 - val_accuracy: 0.7494\n","Epoch 22/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2517 - accuracy: 0.9165 - val_loss: 0.5062 - val_accuracy: 0.7494\n","Epoch 23/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2390 - accuracy: 0.9222 - val_loss: 0.5113 - val_accuracy: 0.7569\n","Epoch 24/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2284 - accuracy: 0.9253 - val_loss: 0.5258 - val_accuracy: 0.7594\n","Epoch 25/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2179 - accuracy: 0.9284 - val_loss: 0.5586 - val_accuracy: 0.7444\n","Epoch 26/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2081 - accuracy: 0.9303 - val_loss: 0.5872 - val_accuracy: 0.7419\n","Epoch 27/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2010 - accuracy: 0.9353 - val_loss: 0.5435 - val_accuracy: 0.7594\n","Epoch 28/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.1925 - accuracy: 0.9379 - val_loss: 0.5871 - val_accuracy: 0.7544\n","Epoch 29/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.1854 - accuracy: 0.9422 - val_loss: 0.5628 - val_accuracy: 0.7569\n","Epoch 30/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.1785 - accuracy: 0.9448 - val_loss: 0.5809 - val_accuracy: 0.7519\n"]}]},{"cell_type":"markdown","metadata":{"id":"HhLPbUl2AZ0y"},"source":["# Plot the accuracy and loss"]},{"cell_type":"code","metadata":{"id":"jzBM1PpJAYfD","colab":{"base_uri":"https://localhost:8080/","height":541},"executionInfo":{"status":"ok","timestamp":1636437321533,"user_tz":-540,"elapsed":558,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"e3701d5e-2ecd-4e35-d7f1-a4efea402e50"},"source":["import matplotlib.pyplot as plt\n","\n","\n","def plot_graphs(history, string):\n","  plt.plot(history.history[string])\n","  plt.plot(history.history['val_'+string])\n","  plt.xlabel(\"Epochs\")\n","  plt.ylabel(string)\n","  plt.legend([string, 'val_'+string])\n","  plt.show()\n","  \n","plot_graphs(history, \"accuracy\")\n","plot_graphs(history, \"loss\")"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Fwr5inBiWffb"},"source":["# Define a function to predict the sentiment of reviews\n","\n","We'll be creating models with some differences and will use each model to predict the sentiment of some new reviews.\n","\n","To save time, create a function that will take in a model and some new reviews, and print out the sentiment of each reviews.\n","\n","The higher the sentiment value is to 1, the more positive the review is."]},{"cell_type":"code","metadata":{"id":"aPNOYiiaha2y","executionInfo":{"status":"ok","timestamp":1636437321534,"user_tz":-540,"elapsed":17,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["# Define a function to take a series of reviews\n","# and predict whether each one is a positive or negative review\n","\n","# max_length = 100 # previously defined\n","\n","def predict_review(model, new_sentences, maxlen=max_length, show_padded_sequence=True ):\n","  # Keep the original sentences so that we can keep using them later\n","  # Create an array to hold the encoded sequences\n","  new_sequences = []\n","\n","  # Convert the new reviews to sequences\n","  for i, frvw in enumerate(new_sentences):\n","    new_sequences.append(tokenizer.encode(frvw))\n","\n","  trunc_type='post' \n","  padding_type='post'\n","\n","  # Pad all sequences for the new reviews\n","  new_reviews_padded = pad_sequences(new_sequences, maxlen=max_length, \n","                                 padding=padding_type, truncating=trunc_type)             \n","\n","  classes = model.predict(new_reviews_padded)\n","\n","  # The closer the class is to 1, the more positive the review is\n","  for x in range(len(new_sentences)):\n","    \n","    # We can see the padded sequence if desired\n","    # Print the sequence\n","    if (show_padded_sequence):\n","      print(new_reviews_padded[x])\n","    # Print the review as text\n","    print(new_sentences[x])\n","    # Print its predicted class\n","    print(classes[x])\n","    print(\"\\n\")"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qg-maex27KPW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437321535,"user_tz":-540,"elapsed":16,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"17127cdc-4051-42fa-e8e0-0ecb134790af"},"source":["# Use the model to predict some reviews   \n","fake_reviews = [\"I love this phone\", \n","                \"Everything was cold\",\n","                \"Everything was hot exactly as I wanted\", \n","                \"Everything was green\", \n","                \"the host seated us immediately\",\n","                \"they gave us free chocolate cake\", \n","                \"we couldn't hear each other talk because of the shouting in the kitchen\"\n","              ]\n","\n","predict_review(model, fake_reviews)\n"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["[  4 281  16  25   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","I love this phone\n","[0.92115855]\n","\n","\n","[812 227 864 100 775   9 525 843   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was cold\n","[0.10540302]\n","\n","\n","[812 227 864 100 775   9 109   8 333 731  24  61   4 171  59  77   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was hot exactly as I wanted\n","[0.27926484]\n","\n","\n","[812 227 864 100 775   9 157 359 853   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was green\n","[0.09709021]\n","\n","\n","[  1 109 228 540 237 635 241 423 340  89 298   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","the host seated us immediately\n","[0.47726718]\n","\n","\n","[154 242  47 635 341  12 569 547 147 319 775 125  85   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","they gave us free chocolate cake\n","[0.78232986]\n","\n","\n","[158 190 853 782   8 607 775 210 232 146 775 470  67 305 101  15   1 328\n"," 296  26  19   1 661 641 195   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","we couldn't hear each other talk because of the shouting in the kitchen\n","[0.03937857]\n","\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"ycJKbMq3K4iy"},"source":["# Define a function to train and show the results of models with different layers\n","\n","In the rest of this colab, we will define models, and then see the results. \n","\n","Define a function that will take the model, compile it, train it, graph the accuracy and loss, and then predict some results."]},{"cell_type":"code","metadata":{"id":"PevUcINXK3gn","executionInfo":{"status":"ok","timestamp":1636437321535,"user_tz":-540,"elapsed":10,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["def fit_model_now (model, sentences) :\n","  model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","  model.summary()\n","  history = model.fit(training_sequences, training_labels_final, epochs=num_epochs, \n","                      validation_data=(testing_sequences, testing_labels_final))\n","  return history\n","\n","def plot_results (history):\n","  plot_graphs(history, \"accuracy\")\n","  plot_graphs(history, \"loss\")\n","\n","def fit_model_and_show_results (model, sentences):\n","  history = fit_model_now(model, sentences)\n","  plot_results(history)\n","  predict_review(model, sentences)"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"U13JBiJUG1oq"},"source":["# Add a bidirectional LSTM\n","\n","Create a new model that uses a bidirectional LSTM.\n","\n","Then use the function we have already defined to compile the model, train it, graph the accuracy and loss, then predict some results."]},{"cell_type":"code","metadata":{"id":"scTUsFPAG4zP","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1636437368634,"user_tz":-540,"elapsed":47109,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"979ba5e8-cd1a-49e8-f201-f9ec84f1f738"},"source":["# Define the model\n","model_bidi_lstm = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)), \n","    tf.keras.layers.Dense(6, activation='relu'), \n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","# Compile and train the model and then show the predictions for our extra sentences\n","fit_model_and_show_results(model_bidi_lstm, fake_reviews)\n"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, 50, 16)            16000     \n","_________________________________________________________________\n","bidirectional (Bidirectional (None, 32)                4224      \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 6)                 198       \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 1)                 7         \n","=================================================================\n","Total params: 20,429\n","Trainable params: 20,429\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/30\n","50/50 [==============================] - 8s 41ms/step - loss: 0.6908 - accuracy: 0.5223 - val_loss: 0.6977 - val_accuracy: 0.4110\n","Epoch 2/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.6615 - accuracy: 0.5719 - val_loss: 0.6595 - val_accuracy: 0.6040\n","Epoch 3/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.5527 - accuracy: 0.7608 - val_loss: 0.6330 - val_accuracy: 0.6867\n","Epoch 4/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.4670 - accuracy: 0.8412 - val_loss: 0.6186 - val_accuracy: 0.7569\n","Epoch 5/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.4126 - accuracy: 0.8901 - val_loss: 0.6605 - val_accuracy: 0.7519\n","Epoch 6/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.3748 - accuracy: 0.9109 - val_loss: 0.6845 - val_accuracy: 0.7669\n","Epoch 7/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.3491 - accuracy: 0.9266 - val_loss: 0.7641 - val_accuracy: 0.7293\n","Epoch 8/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.3290 - accuracy: 0.9322 - val_loss: 0.7220 - val_accuracy: 0.7494\n","Epoch 9/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.3208 - accuracy: 0.9353 - val_loss: 0.8600 - val_accuracy: 0.7569\n","Epoch 10/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2971 - accuracy: 0.9448 - val_loss: 0.9319 - val_accuracy: 0.7544\n","Epoch 11/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2799 - accuracy: 0.9542 - val_loss: 1.1363 - val_accuracy: 0.7519\n","Epoch 12/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2700 - accuracy: 0.9554 - val_loss: 1.1117 - val_accuracy: 0.7569\n","Epoch 13/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2614 - accuracy: 0.9586 - val_loss: 1.0223 - val_accuracy: 0.7419\n","Epoch 14/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2547 - accuracy: 0.9617 - val_loss: 1.2492 - val_accuracy: 0.7243\n","Epoch 15/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2522 - accuracy: 0.9561 - val_loss: 1.5625 - val_accuracy: 0.7243\n","Epoch 16/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.2415 - accuracy: 0.9579 - val_loss: 1.3233 - val_accuracy: 0.7343\n","Epoch 17/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2279 - accuracy: 0.9636 - val_loss: 1.4450 - val_accuracy: 0.7444\n","Epoch 18/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2225 - accuracy: 0.9642 - val_loss: 1.3073 - val_accuracy: 0.7469\n","Epoch 19/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2262 - accuracy: 0.9605 - val_loss: 1.1674 - val_accuracy: 0.7419\n","Epoch 20/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.2137 - accuracy: 0.9655 - val_loss: 1.5275 - val_accuracy: 0.7393\n","Epoch 21/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2035 - accuracy: 0.9680 - val_loss: 1.2095 - val_accuracy: 0.7469\n","Epoch 22/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.1963 - accuracy: 0.9686 - val_loss: 1.4886 - val_accuracy: 0.7393\n","Epoch 23/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.1979 - accuracy: 0.9667 - val_loss: 1.4610 - val_accuracy: 0.7318\n","Epoch 24/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.1933 - accuracy: 0.9648 - val_loss: 1.7656 - val_accuracy: 0.7619\n","Epoch 25/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.1856 - accuracy: 0.9680 - val_loss: 1.5409 - val_accuracy: 0.7744\n","Epoch 26/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.1798 - accuracy: 0.9692 - val_loss: 1.5984 - val_accuracy: 0.7719\n","Epoch 27/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.1786 - accuracy: 0.9686 - val_loss: 1.2688 - val_accuracy: 0.7694\n","Epoch 28/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.1839 - accuracy: 0.9674 - val_loss: 1.1618 - val_accuracy: 0.7619\n","Epoch 29/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.1766 - accuracy: 0.9674 - val_loss: 1.3135 - val_accuracy: 0.7569\n","Epoch 30/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.1688 - accuracy: 0.9686 - val_loss: 1.6018 - val_accuracy: 0.7619\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["[  4 281  16  25   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","I love this phone\n","[0.9982766]\n","\n","\n","[812 227 864 100 775   9 525 843   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was cold\n","[0.2199112]\n","\n","\n","[812 227 864 100 775   9 109   8 333 731  24  61   4 171  59  77   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was hot exactly as I wanted\n","[0.2199112]\n","\n","\n","[812 227 864 100 775   9 157 359 853   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was green\n","[0.2199112]\n","\n","\n","[  1 109 228 540 237 635 241 423 340  89 298   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","the host seated us immediately\n","[0.2199112]\n","\n","\n","[154 242  47 635 341  12 569 547 147 319 775 125  85   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","they gave us free chocolate cake\n","[0.9721386]\n","\n","\n","[158 190 853 782   8 607 775 210 232 146 775 470  67 305 101  15   1 328\n"," 296  26  19   1 661 641 195   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","we couldn't hear each other talk because of the shouting in the kitchen\n","[0.2199112]\n","\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"QsxKPbCnPJTj"},"source":["# Use multiple bidirectional layers\n","\n","Now let's see if we get any improvements from adding another Bidirectional LSTM layer to the model.\n","\n","Notice that the first Bidirectionl LSTM layer returns a sequence."]},{"cell_type":"code","metadata":{"id":"3N6Zul47PMED","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1636437452643,"user_tz":-540,"elapsed":84026,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"c242acf9-a935-4f79-ccc8-47bdb2614199"},"source":["model_multiple_bidi_lstm = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim, \n","                                                       return_sequences=True)), \n","    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),\n","    tf.keras.layers.Dense(6, activation='relu'),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","fit_model_and_show_results(model_multiple_bidi_lstm, fake_reviews)"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_2 (Embedding)      (None, 50, 16)            16000     \n","_________________________________________________________________\n","bidirectional_1 (Bidirection (None, 50, 32)            4224      \n","_________________________________________________________________\n","bidirectional_2 (Bidirection (None, 32)                6272      \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 6)                 198       \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 1)                 7         \n","=================================================================\n","Total params: 26,701\n","Trainable params: 26,701\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/30\n","50/50 [==============================] - 11s 80ms/step - loss: 0.6929 - accuracy: 0.5072 - val_loss: 0.6957 - val_accuracy: 0.4110\n","Epoch 2/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.6724 - accuracy: 0.5223 - val_loss: 0.6846 - val_accuracy: 0.4110\n","Epoch 3/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.5224 - accuracy: 0.7765 - val_loss: 0.5807 - val_accuracy: 0.7669\n","Epoch 4/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.3821 - accuracy: 0.8424 - val_loss: 0.5400 - val_accuracy: 0.7569\n","Epoch 5/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.3268 - accuracy: 0.8763 - val_loss: 0.5707 - val_accuracy: 0.7419\n","Epoch 6/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.2634 - accuracy: 0.9071 - val_loss: 0.6917 - val_accuracy: 0.7368\n","Epoch 7/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.2218 - accuracy: 0.9316 - val_loss: 0.5563 - val_accuracy: 0.7669\n","Epoch 8/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.2036 - accuracy: 0.9391 - val_loss: 0.7497 - val_accuracy: 0.7444\n","Epoch 9/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1880 - accuracy: 0.9460 - val_loss: 0.6617 - val_accuracy: 0.7494\n","Epoch 10/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1689 - accuracy: 0.9510 - val_loss: 0.8668 - val_accuracy: 0.7419\n","Epoch 11/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1681 - accuracy: 0.9535 - val_loss: 0.6778 - val_accuracy: 0.7569\n","Epoch 12/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1602 - accuracy: 0.9554 - val_loss: 1.0169 - val_accuracy: 0.7444\n","Epoch 13/30\n","50/50 [==============================] - 2s 50ms/step - loss: 0.2152 - accuracy: 0.9309 - val_loss: 0.7613 - val_accuracy: 0.7393\n","Epoch 14/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1667 - accuracy: 0.9517 - val_loss: 0.7969 - val_accuracy: 0.7419\n","Epoch 15/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1391 - accuracy: 0.9648 - val_loss: 0.8791 - val_accuracy: 0.7544\n","Epoch 16/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1373 - accuracy: 0.9630 - val_loss: 0.8221 - val_accuracy: 0.7469\n","Epoch 17/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1501 - accuracy: 0.9598 - val_loss: 0.8762 - val_accuracy: 0.7343\n","Epoch 18/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1354 - accuracy: 0.9648 - val_loss: 0.9056 - val_accuracy: 0.7444\n","Epoch 19/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1269 - accuracy: 0.9674 - val_loss: 0.8967 - val_accuracy: 0.7519\n","Epoch 20/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1408 - accuracy: 0.9617 - val_loss: 0.8817 - val_accuracy: 0.7469\n","Epoch 21/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1407 - accuracy: 0.9661 - val_loss: 0.9401 - val_accuracy: 0.7368\n","Epoch 22/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1136 - accuracy: 0.9730 - val_loss: 0.9606 - val_accuracy: 0.7494\n","Epoch 23/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1120 - accuracy: 0.9736 - val_loss: 0.9802 - val_accuracy: 0.7594\n","Epoch 24/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1073 - accuracy: 0.9749 - val_loss: 1.0016 - val_accuracy: 0.7569\n","Epoch 25/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1067 - accuracy: 0.9749 - val_loss: 0.9953 - val_accuracy: 0.7544\n","Epoch 26/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1064 - accuracy: 0.9749 - val_loss: 0.9977 - val_accuracy: 0.7519\n","Epoch 27/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1325 - accuracy: 0.9655 - val_loss: 0.9831 - val_accuracy: 0.7519\n","Epoch 28/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1674 - accuracy: 0.9504 - val_loss: 0.8765 - val_accuracy: 0.7419\n","Epoch 29/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1586 - accuracy: 0.9561 - val_loss: 0.8499 - val_accuracy: 0.7419\n","Epoch 30/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1318 - accuracy: 0.9667 - val_loss: 0.9220 - val_accuracy: 0.7318\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["[  4 281  16  25   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","I love this phone\n","[0.9964115]\n","\n","\n","[812 227 864 100 775   9 525 843   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was cold\n","[0.09280833]\n","\n","\n","[812 227 864 100 775   9 109   8 333 731  24  61   4 171  59  77   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was hot exactly as I wanted\n","[0.10907345]\n","\n","\n","[812 227 864 100 775   9 157 359 853   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was green\n","[0.05916117]\n","\n","\n","[  1 109 228 540 237 635 241 423 340  89 298   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","the host seated us immediately\n","[0.0467901]\n","\n","\n","[154 242  47 635 341  12 569 547 147 319 775 125  85   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","they gave us free chocolate cake\n","[0.9960342]\n","\n","\n","[158 190 853 782   8 607 775 210 232 146 775 470  67 305 101  15   1 328\n"," 296  26  19   1 661 641 195   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","we couldn't hear each other talk because of the shouting in the kitchen\n","[0.05588114]\n","\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"ABVYYPwba8Hx"},"source":["# Compare predictions for all the models\n","\n","It can be hard to see which model gives a better prediction for different reviews when you examine each model separately. So for comparison purposes, here we define some more reviews and print out the predictions that each of the three models gives for each review:\n","\n","*   Embeddings and a Global Average Pooling layer\n","*   Embeddings and a Bidirectional LSTM layer\n","*   Embeddings and two Bidirectional LSTM layers\n","\n","The results are not always what you might expect. The input dataset is fairly small, it has less than 2000 reviews. Some of the reviews are fairly short, and some of the short ones are fairly repetitive which reduces their impact on improving the  model, such as these two reviews:\n","\n","*   Bad Quality.\n","*   Low Quality.\n","\n","Feel free to add more reviews of your own, or change the reviews. The results will depend on the combination of words in the reviews, and how well they match to reviews in the training set. \n","\n","How do the different models handle things like \"wasn't good\" which contains a positive word (good) but is a poor review?\n"]},{"cell_type":"code","metadata":{"id":"6XebrXt0jtOy","executionInfo":{"status":"ok","timestamp":1636437452646,"user_tz":-540,"elapsed":35,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}}},"source":["my_reviews =[\"lovely\", \"dreadful\", \"stay away\",\n","             \"everything was hot exactly as I wanted\",\n","             \"everything was not exactly as I wanted\",\n","             \"they gave us free chocolate cake\",\n","             \"I've never eaten anything so spicy in my life, my throat burned for hours\",\n","             \"for a phone that is as expensive as this one I expect it to be much easier to use than this thing is\",\n","             \"we left there very full for a low price so I'd say you just can't go wrong at this place\",\n","             \"that place does not have quality meals and it isn't a good place to go for dinner\",\n","             ]"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"tRWGjkJLkY2y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437452652,"user_tz":-540,"elapsed":36,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"719aa4b9-fea0-42ba-ff9d-f02d31b451bd"},"source":["print(\"===================================\\n\",\"Embeddings only:\\n\", \"===================================\",)\n","predict_review(model, my_reviews, show_padded_sequence=False)"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["===================================\n"," Embeddings only:\n"," ===================================\n","lovely\n","[0.92939866]\n","\n","\n","dreadful\n","[0.30738986]\n","\n","\n","stay away\n","[0.6484204]\n","\n","\n","everything was hot exactly as I wanted\n","[0.74054575]\n","\n","\n","everything was not exactly as I wanted\n","[0.43943304]\n","\n","\n","they gave us free chocolate cake\n","[0.78232986]\n","\n","\n","I've never eaten anything so spicy in my life, my throat burned for hours\n","[0.05098955]\n","\n","\n","for a phone that is as expensive as this one I expect it to be much easier to use than this thing is\n","[0.37673834]\n","\n","\n","we left there very full for a low price so I'd say you just can't go wrong at this place\n","[0.8033808]\n","\n","\n","that place does not have quality meals and it isn't a good place to go for dinner\n","[0.84517944]\n","\n","\n"]}]},{"cell_type":"code","metadata":{"id":"G2FJR3IVBt30","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437452653,"user_tz":-540,"elapsed":33,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"0a79a95a-7fb8-499e-ff1a-0017b143edca"},"source":["print(\"===================================\\n\", \"With a single bidirectional LSTM:\\n\", \"===================================\")\n","predict_review(model_bidi_lstm, my_reviews, show_padded_sequence=False)"],"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["===================================\n"," With a single bidirectional LSTM:\n"," ===================================\n","lovely\n","[0.99977463]\n","\n","\n","dreadful\n","[0.2199112]\n","\n","\n","stay away\n","[0.2199112]\n","\n","\n","everything was hot exactly as I wanted\n","[0.7135251]\n","\n","\n","everything was not exactly as I wanted\n","[0.2199112]\n","\n","\n","they gave us free chocolate cake\n","[0.9721386]\n","\n","\n","I've never eaten anything so spicy in my life, my throat burned for hours\n","[0.2199112]\n","\n","\n","for a phone that is as expensive as this one I expect it to be much easier to use than this thing is\n","[0.2199112]\n","\n","\n","we left there very full for a low price so I'd say you just can't go wrong at this place\n","[0.9950735]\n","\n","\n","that place does not have quality meals and it isn't a good place to go for dinner\n","[0.2199112]\n","\n","\n"]}]},{"cell_type":"code","metadata":{"id":"81v1r3Y2BwvC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636437453095,"user_tz":-540,"elapsed":470,"user":{"displayName":"yulina c","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4dEa68E63egNMym7F8TWL-eJBUq5cGDZghMZq=s64","userId":"11438799591074629708"}},"outputId":"f60eff43-0d85-4713-ad45-de9a54d6b279"},"source":["print(\"===================================\\n\",\"With two bidirectional LSTMs:\\n\", \"===================================\")\n","predict_review(model_multiple_bidi_lstm, my_reviews, show_padded_sequence=False)"],"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["===================================\n"," With two bidirectional LSTMs:\n"," ===================================\n","lovely\n","[0.99615014]\n","\n","\n","dreadful\n","[0.0391127]\n","\n","\n","stay away\n","[0.35135412]\n","\n","\n","everything was hot exactly as I wanted\n","[0.22323546]\n","\n","\n","everything was not exactly as I wanted\n","[0.05204741]\n","\n","\n","they gave us free chocolate cake\n","[0.9960342]\n","\n","\n","I've never eaten anything so spicy in my life, my throat burned for hours\n","[0.05369589]\n","\n","\n","for a phone that is as expensive as this one I expect it to be much easier to use than this thing is\n","[0.05264349]\n","\n","\n","we left there very full for a low price so I'd say you just can't go wrong at this place\n","[0.0567838]\n","\n","\n","that place does not have quality meals and it isn't a good place to go for dinner\n","[0.05030035]\n","\n","\n"]}]}]}